[
    {
        "id": "16b7dc7.3dbcba4",
        "type": "mongodb out",
        "z": "6770a0f5.534608",
        "mongodb": "9ae83bde.8750b",
        "name": "",
        "collection": "SensorReadings",
        "payonly": false,
        "upsert": false,
        "multi": false,
        "operation": "store",
        "x": 856,
        "y": 209.5,
        "wires": []
    },
    {
        "id": "e9c90a9f.6f0f88",
        "type": "e-mail",
        "z": "6770a0f5.534608",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "name": "solomonkembo@gmail.com",
        "dname": "Email Abnormal Values",
        "x": 780,
        "y": 604,
        "wires": []
    },
    {
        "id": "635680e8.fb63b",
        "type": "debug",
        "z": "6770a0f5.534608",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 549,
        "y": 303,
        "wires": []
    },
    {
        "id": "3a57812b.e7d7b6",
        "type": "function",
        "z": "6770a0f5.534608",
        "name": "Format Data for MongoDB",
        "func": "msg.payload = msg.payload.trim();//remove newline\nvar values = msg.payload.split(\",\");//break comma-seperated sensor values into an array\nvar sensorObject={};//create json object\nsensorObject[\"temperature\"]=values[0];//array element 1 becomes object member 1\nsensorObject[\"water-level\"]=values[1];//array element 2 becomes object member 2\nsensorObject[\"ph\"]=values[2];//array element 3 becomes object member 3\nsensorObject[\"EC\"]=values[3];\nsensorObject[\"ArduinoID\"]=values[4];\nsensorObject[\"DateTime\"]=new Date().toISOString();\nmsg.payload=sensorObject;//return json object as payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 286,
        "y": 236,
        "wires": [
            [
                "16b7dc7.3dbcba4"
            ]
        ]
    },
    {
        "id": "c6a74a53.c698d8",
        "type": "function",
        "z": "6770a0f5.534608",
        "name": "Temperature",
        "func": "msg.payload = msg.payload.trim();//remove newline\nvar values = msg.payload.split(\",\");//break comma-seperated sensor values into an array\nmsg.payload= values[0];\nif(values[0]>40){\n    global.set(\"abnormal_temp\",values[0]);\n}\nelse{\n    global.set(\"abnormal_temp\",0);\n}\nreturn msg",
        "outputs": "1",
        "noerr": 0,
        "x": 288,
        "y": 497,
        "wires": [
            [
                "a58e04aa.2c6df8"
            ]
        ]
    },
    {
        "id": "a58e04aa.2c6df8",
        "type": "ui_chart",
        "z": "6770a0f5.534608",
        "name": "Plot Temperature",
        "group": "9e5a8945.feaca",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "ymin": "",
        "ymax": "",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "x": 576,
        "y": 443,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "2abc363b.5064ca",
        "type": "function",
        "z": "6770a0f5.534608",
        "name": "Water Level",
        "func": "msg.payload = msg.payload.trim();//remove newline\nvar values = msg.payload.split(\",\");//break comma-seperated sensor values into an array\nmsg.payload= values[1]\nif(values[1]==1){\n    global.set(\"abnormal_water_level\",values[1]);\n}\nelse{\n    global.set(\"abnormal_water_level\",0);\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 239,
        "y": 614,
        "wires": [
            [
                "ee3d9561.7570f"
            ]
        ]
    },
    {
        "id": "ee3d9561.7570f",
        "type": "ui_chart",
        "z": "6770a0f5.534608",
        "name": "",
        "group": "9e5a8945.feaca",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Water Level",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "ymin": "",
        "ymax": "",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "x": 395,
        "y": 614,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "63f1d272.fb221c",
        "type": "function",
        "z": "6770a0f5.534608",
        "name": "PH Level",
        "func": "msg.payload = msg.payload.trim();//remove newline\nvar values = msg.payload.split(\",\");//break comma-seperated sensor values into an array\nmsg.payload= values[2];\nif(values[2]<5 || values[2]>9 ){\n    global.set(\"abnormal_ph\",values[2]);\n}\nelse{\n    global.set(\"abnormal_ph\",0);\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 230,
        "y": 741,
        "wires": [
            [
                "c262462e.9f628"
            ]
        ]
    },
    {
        "id": "c262462e.9f628",
        "type": "ui_chart",
        "z": "6770a0f5.534608",
        "name": "",
        "group": "9e5a8945.feaca",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "PH",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "ymin": "",
        "ymax": "",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "x": 390,
        "y": 741,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a5e507b5.2914f",
        "type": "function",
        "z": "6770a0f5.534608",
        "name": "Check Temperature ",
        "func": "if (global.get(\"abnormal_temp\")!==0){\n    msg.topic=\"Abnormal Temperature\";\n    msg.payload=\"We have observed an abonormal Temperature of \"+ global.get(\"abnormal_temp\");\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 592,
        "y": 549,
        "wires": [
            []
        ]
    },
    {
        "id": "fee2f2e8.67d7c8",
        "type": "function",
        "z": "6770a0f5.534608",
        "name": "Check Level",
        "func": "if (global.get(\"abnormal_water_level\")!==0){\n    msg.topic=\"Abnormal Water Level\";\n    msg.payload=\"We have observed an abonormal Water Level of \"+ global.get(\"abnormal_water_level\");\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 569,
        "y": 639,
        "wires": [
            []
        ]
    },
    {
        "id": "5e243220.032074",
        "type": "function",
        "z": "6770a0f5.534608",
        "name": "Check PH Level",
        "func": "if (global.get(\"abnormal_ph\")!==0){\n    msg.topic=\"Abnormal PH Level\";\n    msg.payload=\"We have observed an abonormal PH of \"+ global.get(\"abnormal_ph\");\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 574,
        "y": 722,
        "wires": [
            []
        ]
    },
    {
        "id": "9fa753cf.95003",
        "type": "serial in",
        "z": "6770a0f5.534608",
        "name": "Arduino Uno",
        "serial": "3efe78aa.57cde",
        "x": 75,
        "y": 404,
        "wires": [
            [
                "c6a74a53.c698d8",
                "3a57812b.e7d7b6",
                "2abc363b.5064ca",
                "63f1d272.fb221c",
                "9ea59637.006a48"
            ]
        ]
    },
    {
        "id": "ba949226.08a38",
        "type": "inject",
        "z": "6770a0f5.534608",
        "name": "Error Emails",
        "topic": "Timer",
        "payload": "null",
        "payloadType": "str",
        "repeat": "1200",
        "crontab": "",
        "once": false,
        "x": 319,
        "y": 330,
        "wires": [
            [
                "a5e507b5.2914f",
                "fee2f2e8.67d7c8",
                "5e243220.032074"
            ]
        ]
    },
    {
        "id": "9ea59637.006a48",
        "type": "function",
        "z": "6770a0f5.534608",
        "name": "EC Level",
        "func": "\nmsg.payload = msg.payload.trim();//remove newline\nvar values = msg.payload.split(\",\");//break comma-seperated sensor values into an array\nmsg.payload= values[3];\nif(values[3]>10000){\n    global.set(\"abnormal_ec\",values[3]);\n}\nelse{\n    global.set(\"abnormal_ec\",0);\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 230,
        "y": 827,
        "wires": [
            [
                "acc05f6c.b2d55"
            ]
        ]
    },
    {
        "id": "acc05f6c.b2d55",
        "type": "ui_chart",
        "z": "6770a0f5.534608",
        "name": "",
        "group": "9e5a8945.feaca",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "EC Level",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "x": 406,
        "y": 828,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9ae83bde.8750b",
        "type": "mongodb",
        "z": "",
        "hostname": "127.0.0.1",
        "port": "27017",
        "db": "aquadb",
        "name": ""
    },
    {
        "id": "9e5a8945.feaca",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "fb2586a3.b8f178",
        "disp": true,
        "width": "6"
    },
    {
        "id": "3efe78aa.57cde",
        "type": "serial-port",
        "z": "",
        "serialport": "/dev/ttyACM0",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": false
    },
    {
        "id": "fb2586a3.b8f178",
        "type": "ui_tab",
        "z": "",
        "name": "Open Aquarium Readings",
        "icon": "dashboard"
    }
]
